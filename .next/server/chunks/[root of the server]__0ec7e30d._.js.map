{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/ipsitamondal/Documents/projects/muzu/Muzu/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nexport const prismaClient=new PrismaClient();"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAa,IAAI,6HAAA,CAAA,eAAY","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///Users/ipsitamondal/Documents/projects/muzu/Muzu/src/lib/auth.ts"],"sourcesContent":["// lib/auth.ts\nimport { NextAuthOptions } from \"next-auth\";\nimport GitHubProvider from \"next-auth/providers/github\"; // or any provider you're using\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    GitHubProvider({\n      clientId: process.env.GITHUB_ID!,\n      clientSecret: process.env.GITHUB_SECRET!\n    }),\n  ],\n  // any custom callbacks or settings\n};\n"],"names":[],"mappings":"AAAA,cAAc;;;;AAEd,sQAAyD,+BAA+B;;AAEjF,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;KACD;AAEH","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/ipsitamondal/Documents/projects/muzu/Muzu/src/app/api/streams/my/route.ts"],"sourcesContent":["import { prismaClient } from \"../../../../../lib/db\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"../../../../lib/auth\"; // Updated to use a valid alias path\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function GET(req: NextRequest) {\n  const session = await getServerSession({ req, ...authOptions }) as { user?: { email?: string } }; // Explicitly type the session object\n\n  if (!session || !session.user?.email) {\n    return NextResponse.json({ message: \"Unauthenticated\" }, { status: 403 });\n  }\n\n  const user = await prismaClient.user.findUnique({\n    where: {\n      email: session.user.email\n    }\n  });\n\n  if (!user) {\n    return NextResponse.json({ message: \"User not found\" }, { status: 404 });\n  }\n\n  const streams = await prismaClient.stream.findMany({\n    where: {\n      userID: user.id\n    }\n  });\n\n  return NextResponse.json({ streams });\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA,0MAAoD,oCAAoC;AACxF;;;;;AAEO,eAAe,IAAI,GAAgB;IACxC,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE;QAAE;QAAK,GAAG,oHAAA,CAAA,cAAW;IAAC,IAAqC,qCAAqC;IAEvI,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE,OAAO;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,OAAO,MAAM,2GAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU,CAAC;QAC9C,OAAO;YACL,OAAO,QAAQ,IAAI,CAAC,KAAK;QAC3B;IACF;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,MAAM,UAAU,MAAM,2GAAA,CAAA,eAAY,CAAC,MAAM,CAAC,QAAQ,CAAC;QACjD,OAAO;YACL,QAAQ,KAAK,EAAE;QACjB;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;IAAQ;AACrC","debugId":null}}]
}