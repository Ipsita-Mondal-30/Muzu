{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/ipsitamondal/Documents/projects/muzu/Muzu/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nexport const prismaClient=new PrismaClient();"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAa,IAAI,6HAAA,CAAA,eAAY","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///Users/ipsitamondal/Documents/projects/muzu/Muzu/src/app/api/streams/upvote/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { z } from \"zod\";\nimport { getServerSession as getSession } from \"next-auth\";\nimport { prismaClient } from \"../../../../../lib/db\";\n\nconst UpvoteSchema = z.object({\nStreamId: z.string(), \n})\nexport async function POST(request: Request) {\n    const session=await getServerSession( );\n     const user=await prismaClient.user.findFirst({\n        where: {\n            email: session?.user?.email ?? \"\",\n        },\n     });\n     if(!session?.user?.email){\n        return NextResponse.json(\n            {\n                message: \"Unauthenticated\",\n            },\n            {\n                status: 403,\n            }\n        )\n     } \n     try{\n        const data=UpvoteSchema.parse(await request.json());\n        await prismaClient.upvote.create({\n            data:{\n                userID: user?.id ?? \"\",\n                streamID:data.StreamId,\n            }\n        });\n        return NextResponse.json({\n            message:\"Upvoted successfully\",\n        })\n    } catch(e){\n        return NextResponse.json(\n            {\n                message: \"Error while upvoting\",\n            },\n            {\n                status: 400,\n            }\n        )\n\n    }\n     }\n\n   \nasync function getServerSession() {\n    try {\n        const session = await getSession();\n        return session;\n    } catch (error) {\n        console.error(\"Error fetching server session:\", error);\n        return null;\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,eAAe,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM;AAClB;AACO,eAAe,KAAK,OAAgB;IACvC,MAAM,UAAQ,MAAM;IACnB,MAAM,OAAK,MAAM,2GAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS,CAAC;QAC1C,OAAO;YACH,OAAO,SAAS,MAAM,SAAS;QACnC;IACH;IACA,IAAG,CAAC,SAAS,MAAM,OAAM;QACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,SAAS;QACb,GACA;YACI,QAAQ;QACZ;IAEP;IACA,IAAG;QACA,MAAM,OAAK,aAAa,KAAK,CAAC,MAAM,QAAQ,IAAI;QAChD,MAAM,2GAAA,CAAA,eAAY,CAAC,MAAM,CAAC,MAAM,CAAC;YAC7B,MAAK;gBACD,QAAQ,MAAM,MAAM;gBACpB,UAAS,KAAK,QAAQ;YAC1B;QACJ;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAQ;QACZ;IACJ,EAAE,OAAM,GAAE;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,SAAS;QACb,GACA;YACI,QAAQ;QACZ;IAGR;AACC;AAGL,eAAe;IACX,IAAI;QACA,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAU,AAAD;QAC/B,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO;IACX;AACJ","debugId":null}}]
}